(define (atom? SExp)
    (or
     (number? SExp)
     (symbol? SExp)
     (string? SExp)))
(define (atom=? atom1 atom2)
  (cond
    [(and (number? atom2) (number? atom1) (= atom1 atom2))
     true]
    [(and (symbol? atom2) (symbol? atom1) (symbol=? atom1 atom2))
     true]
    [(and (string? atom2) (string? atom1) (string=? atom1 atom2))
     true]
    [else false]))

; Purpose:
; Does two SExps contain the same atoms
; regardless of ordering?
; SExp SExp -> Boolean

;(check-expect (contains-same-atoms? '(1) '(1)) true)
(check-expect (contains-same-atoms? '(1 3) '(3 1)) true)
;(check-expect (contains-same-atoms? '(1 2 3 () ("r" b)) '("r" 1 (2) 3 b)) true)
(define (contains-same-atoms? SExp1 SExp2)
  (local (; Is there an atom in the second s-expression
          ; that is equal to the first one
          ; Atom SExp -> Boolean
          (define (inSecondSExp? atom1 SExp)
            (cond
              [(empty? SExp) false]
              [(atom? SExp)
               (atom=? atom1 SExp)]
              [(list? SExp)
               (or (inSecondSExp? atom1 (first SExp))
                   (inSecondSExp? atom1 (rest SExp)))]))
          ; removes the corresponding element in the 
          ; second s-expression 
          ; Atom SExp -> SExp
          (define (removeAccepted atom1 SExp)
            (cond
              [(empty? SExp) empty]
              [(atom? SExp)
               (if (atom=? SExp atom1)
                   empty
                   SExp)]
              [(list? SExp)
               (if (atom=? (removeAccepted atom1 (first SExp)) atom1)
                   (rest SExp)
                   (cons (first SExp) (removeAccepted atom1 (rest SExp))))])))
    (cond
      [(and (empty? SExp1) (empty? SExp2))
       true]
      [(empty? SExp1) false]
      [(empty? SExp2) false]
      [(and (atom? SExp1) (atom? SExp2)) 
       (cond
         [(atom=? SExp1 SExp2)
          true]
         [else (inSecondSExp? SExp1 SExp2)])]            
      [(atom? SExp1)
       (if (inSecondSExp? SExp1 SExp2)
           true
           false)]
      [(atom? SExp2)
       false]
      [else 
       (and (contains-same-atoms? (first SExp1) SExp2)
            (contains-same-atoms? (rest SExp1) (removeAccepted (first SExp1) SExp2)))])))
